"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tokenGen = exports.resetPasswordTokenGen = exports.parseJwt = exports.getIdFromReq = exports.generateCode = void 0;
var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var tokenGen = function tokenGen(data, days) {
  return _jsonwebtoken["default"].sign(data, process.env.JWT_KEY || '', {
    expiresIn: 60 * 60 * 24 * (days || 1) // 1 day
  });
};
exports.tokenGen = tokenGen;
var resetPasswordTokenGen = function resetPasswordTokenGen(email, code) {
  var payload = {
    email: email,
    code: code
  };
  var token = _jsonwebtoken["default"].sign(payload, process.env.JWT_KEY || '', {
    expiresIn: 60 * 15 // 15 minutes
  });

  return token;
};
exports.resetPasswordTokenGen = resetPasswordTokenGen;
var parseJwt = function parseJwt(token) {
  return JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());
};
exports.parseJwt = parseJwt;
var getIdFromReq = function getIdFromReq(req) {
  var _req$header;
  var token = (_req$header = req.header('Authorization')) === null || _req$header === void 0 ? void 0 : _req$header.slice(7); // cut Bearer
  var _id = parseJwt(token !== null && token !== void 0 ? token : '')._id;
  return _id;
};
exports.getIdFromReq = getIdFromReq;
var generateCode = function generateCode() {
  var min = 100000;
  var max = 999999;
  var code = Math.floor(Math.random() * (max - min + 1)) + min;
  return code.toString();
};
exports.generateCode = generateCode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfanNvbndlYnRva2VuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJfX2VzTW9kdWxlIiwidG9rZW5HZW4iLCJkYXRhIiwiZGF5cyIsImp3dCIsInNpZ24iLCJwcm9jZXNzIiwiZW52IiwiSldUX0tFWSIsImV4cGlyZXNJbiIsImV4cG9ydHMiLCJyZXNldFBhc3N3b3JkVG9rZW5HZW4iLCJlbWFpbCIsImNvZGUiLCJwYXlsb2FkIiwidG9rZW4iLCJwYXJzZUp3dCIsIkpTT04iLCJwYXJzZSIsIkJ1ZmZlciIsImZyb20iLCJzcGxpdCIsInRvU3RyaW5nIiwiZ2V0SWRGcm9tUmVxIiwicmVxIiwiX3JlcSRoZWFkZXIiLCJoZWFkZXIiLCJzbGljZSIsIl9pZCIsImdlbmVyYXRlQ29kZSIsIm1pbiIsIm1heCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy90b2tlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0IH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgand0IGZyb20gJ2pzb253ZWJ0b2tlbic7XG5cbmV4cG9ydCBjb25zdCB0b2tlbkdlbiA9IChkYXRhOiBhbnksIGRheXM/OiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIGp3dC5zaWduKGRhdGEsIHByb2Nlc3MuZW52LkpXVF9LRVkgfHwgJycsIHtcbiAgICBleHBpcmVzSW46IDYwICogNjAgKiAyNCAqIChkYXlzIHx8IDEpIC8vIDEgZGF5XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHJlc2V0UGFzc3dvcmRUb2tlbkdlbiA9IChlbWFpbDogc3RyaW5nLCBjb2RlOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgcGF5bG9hZCA9IHsgZW1haWwsIGNvZGUgfTtcbiAgY29uc3QgdG9rZW4gPSBqd3Quc2lnbihwYXlsb2FkLCBwcm9jZXNzLmVudi5KV1RfS0VZIHx8ICcnLCB7XG4gICAgZXhwaXJlc0luOiA2MCAqIDE1IC8vIDE1IG1pbnV0ZXNcbiAgfSk7XG4gIHJldHVybiB0b2tlbjtcbn07XG5cbmV4cG9ydCBjb25zdCBwYXJzZUp3dCA9ICh0b2tlbjogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBKU09OLnBhcnNlKEJ1ZmZlci5mcm9tKHRva2VuLnNwbGl0KCcuJylbMV0sICdiYXNlNjQnKS50b1N0cmluZygpKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRJZEZyb21SZXEgPSAocmVxOiBSZXF1ZXN0KSA9PiB7XG4gIGNvbnN0IHRva2VuID0gcmVxLmhlYWRlcignQXV0aG9yaXphdGlvbicpPy5zbGljZSg3KTsgLy8gY3V0IEJlYXJlclxuICBjb25zdCBfaWQgPSBwYXJzZUp3dCh0b2tlbiA/PyAnJykuX2lkO1xuXG4gIHJldHVybiBfaWQgYXMgc3RyaW5nO1xufTtcblxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlQ29kZSA9ICgpID0+IHtcbiAgY29uc3QgbWluID0gMTAwMDAwO1xuICBjb25zdCBtYXggPSA5OTk5OTk7XG4gIGNvbnN0IGNvZGUgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluO1xuICByZXR1cm4gY29kZS50b1N0cmluZygpO1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsYUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQStCLFNBQUFELHVCQUFBRSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsZ0JBQUFBLEdBQUE7QUFFeEIsSUFBTUUsUUFBUSxHQUFHLFNBQVhBLFFBQVFBLENBQUlDLElBQVMsRUFBRUMsSUFBYSxFQUFLO0VBQ3BELE9BQU9DLHdCQUFHLENBQUNDLElBQUksQ0FBQ0gsSUFBSSxFQUFFSSxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsT0FBTyxJQUFJLEVBQUUsRUFBRTtJQUMvQ0MsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJTixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDeEMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUFDTyxPQUFBLENBQUFULFFBQUEsR0FBQUEsUUFBQTtBQUVLLElBQU1VLHFCQUFxQixHQUFHLFNBQXhCQSxxQkFBcUJBLENBQUlDLEtBQWEsRUFBRUMsSUFBWSxFQUFLO0VBQ3BFLElBQU1DLE9BQU8sR0FBRztJQUFFRixLQUFLLEVBQUxBLEtBQUs7SUFBRUMsSUFBSSxFQUFKQTtFQUFLLENBQUM7RUFDL0IsSUFBTUUsS0FBSyxHQUFHWCx3QkFBRyxDQUFDQyxJQUFJLENBQUNTLE9BQU8sRUFBRVIsT0FBTyxDQUFDQyxHQUFHLENBQUNDLE9BQU8sSUFBSSxFQUFFLEVBQUU7SUFDekRDLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDO0VBQ3JCLENBQUMsQ0FBQzs7RUFDRixPQUFPTSxLQUFLO0FBQ2QsQ0FBQztBQUFDTCxPQUFBLENBQUFDLHFCQUFBLEdBQUFBLHFCQUFBO0FBRUssSUFBTUssUUFBUSxHQUFHLFNBQVhBLFFBQVFBLENBQUlELEtBQWEsRUFBSztFQUN6QyxPQUFPRSxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsTUFBTSxDQUFDQyxJQUFJLENBQUNMLEtBQUssQ0FBQ00sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQzFFLENBQUM7QUFBQ1osT0FBQSxDQUFBTSxRQUFBLEdBQUFBLFFBQUE7QUFFSyxJQUFNTyxZQUFZLEdBQUcsU0FBZkEsWUFBWUEsQ0FBSUMsR0FBWSxFQUFLO0VBQUEsSUFBQUMsV0FBQTtFQUM1QyxJQUFNVixLQUFLLElBQUFVLFdBQUEsR0FBR0QsR0FBRyxDQUFDRSxNQUFNLENBQUMsZUFBZSxDQUFDLGNBQUFELFdBQUEsdUJBQTNCQSxXQUFBLENBQTZCRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNyRCxJQUFNQyxHQUFHLEdBQUdaLFFBQVEsQ0FBQ0QsS0FBSyxhQUFMQSxLQUFLLGNBQUxBLEtBQUssR0FBSSxFQUFFLENBQUMsQ0FBQ2EsR0FBRztFQUVyQyxPQUFPQSxHQUFHO0FBQ1osQ0FBQztBQUFDbEIsT0FBQSxDQUFBYSxZQUFBLEdBQUFBLFlBQUE7QUFFSyxJQUFNTSxZQUFZLEdBQUcsU0FBZkEsWUFBWUEsQ0FBQSxFQUFTO0VBQ2hDLElBQU1DLEdBQUcsR0FBRyxNQUFNO0VBQ2xCLElBQU1DLEdBQUcsR0FBRyxNQUFNO0VBQ2xCLElBQU1sQixJQUFJLEdBQUdtQixJQUFJLENBQUNDLEtBQUssQ0FBQ0QsSUFBSSxDQUFDRSxNQUFNLENBQUMsQ0FBQyxJQUFJSCxHQUFHLEdBQUdELEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHQSxHQUFHO0VBQzlELE9BQU9qQixJQUFJLENBQUNTLFFBQVEsQ0FBQyxDQUFDO0FBQ3hCLENBQUM7QUFBQ1osT0FBQSxDQUFBbUIsWUFBQSxHQUFBQSxZQUFBIn0=