"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSuperAdmin = exports.isShipper = exports.isOwner = exports.isHasPermission = exports.isAdmin = exports.getRole = void 0;
var _user = require("../models/user");
var _token = require("./token");
var isOwner = function isOwner(req) {
  var role = getRole(req);
  return role === _user.Role.owner;
};
exports.isOwner = isOwner;
var isAdmin = function isAdmin(req) {
  var role = getRole(req);
  return role === _user.Role.admin;
};
exports.isAdmin = isAdmin;
var isSuperAdmin = function isSuperAdmin(req) {
  var role = getRole(req);
  return role === _user.Role.super_admin;
};
exports.isSuperAdmin = isSuperAdmin;
var isShipper = function isShipper(req) {
  var role = getRole(req);
  return role === _user.Role.shipper;
};
exports.isShipper = isShipper;
var getRole = function getRole(req) {
  var _req$header;
  var token = (_req$header = req.header('Authorization')) === null || _req$header === void 0 ? void 0 : _req$header.slice(7);
  var _parseJwt = (0, _token.parseJwt)(token !== null && token !== void 0 ? token : ''),
    role = _parseJwt.role;
  return role;
};
exports.getRole = getRole;
var isHasPermission = function isHasPermission(role, compare_role) {
  if (role === _user.Role.shipper || role === _user.Role.user) return false;
  if (role === compare_role) return true;
  if (role === _user.Role.owner) return true;
  if (role === _user.Role.super_admin && compare_role !== _user.Role.owner) return true;
  if (role === _user.Role.admin && compare_role !== _user.Role.owner && compare_role !== _user.Role.super_admin) return true;
  return false;
};
exports.isHasPermission = isHasPermission;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdXNlciIsInJlcXVpcmUiLCJfdG9rZW4iLCJpc093bmVyIiwicmVxIiwicm9sZSIsImdldFJvbGUiLCJSb2xlIiwib3duZXIiLCJleHBvcnRzIiwiaXNBZG1pbiIsImFkbWluIiwiaXNTdXBlckFkbWluIiwic3VwZXJfYWRtaW4iLCJpc1NoaXBwZXIiLCJzaGlwcGVyIiwiX3JlcSRoZWFkZXIiLCJ0b2tlbiIsImhlYWRlciIsInNsaWNlIiwiX3BhcnNlSnd0IiwicGFyc2VKd3QiLCJpc0hhc1Blcm1pc3Npb24iLCJjb21wYXJlX3JvbGUiLCJ1c2VyIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2NvbW1vbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0IH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSAnc3JjL21vZGVscy91c2VyJztcbmltcG9ydCB7IHBhcnNlSnd0IH0gZnJvbSAnLi90b2tlbic7XG5cbmV4cG9ydCBjb25zdCBpc093bmVyID0gKHJlcTogUmVxdWVzdCkgPT4ge1xuICBjb25zdCByb2xlID0gZ2V0Um9sZShyZXEpO1xuXG4gIHJldHVybiByb2xlID09PSBSb2xlLm93bmVyO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzQWRtaW4gPSAocmVxOiBSZXF1ZXN0KSA9PiB7XG4gIGNvbnN0IHJvbGUgPSBnZXRSb2xlKHJlcSk7XG5cbiAgcmV0dXJuIHJvbGUgPT09IFJvbGUuYWRtaW47XG59O1xuXG5leHBvcnQgY29uc3QgaXNTdXBlckFkbWluID0gKHJlcTogUmVxdWVzdCkgPT4ge1xuICBjb25zdCByb2xlID0gZ2V0Um9sZShyZXEpO1xuXG4gIHJldHVybiByb2xlID09PSBSb2xlLnN1cGVyX2FkbWluO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzU2hpcHBlciA9IChyZXE6IFJlcXVlc3QpID0+IHtcbiAgY29uc3Qgcm9sZSA9IGdldFJvbGUocmVxKTtcblxuICByZXR1cm4gcm9sZSA9PT0gUm9sZS5zaGlwcGVyO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFJvbGUgPSAocmVxOiBSZXF1ZXN0KSA9PiB7XG4gIGNvbnN0IHRva2VuID0gcmVxLmhlYWRlcignQXV0aG9yaXphdGlvbicpPy5zbGljZSg3KTtcbiAgY29uc3QgeyByb2xlIH0gPSBwYXJzZUp3dCh0b2tlbiA/PyAnJyk7XG5cbiAgcmV0dXJuIHJvbGUgYXMgUm9sZTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc0hhc1Blcm1pc3Npb24gPSAocm9sZTogUm9sZSwgY29tcGFyZV9yb2xlOiBSb2xlKSA9PiB7XG4gIGlmIChyb2xlID09PSBSb2xlLnNoaXBwZXIgfHwgcm9sZSA9PT0gUm9sZS51c2VyKSByZXR1cm4gZmFsc2U7XG4gIGlmIChyb2xlID09PSBjb21wYXJlX3JvbGUpIHJldHVybiB0cnVlO1xuICBpZiAocm9sZSA9PT0gUm9sZS5vd25lcikgcmV0dXJuIHRydWU7XG4gIGlmIChyb2xlID09PSBSb2xlLnN1cGVyX2FkbWluICYmIGNvbXBhcmVfcm9sZSAhPT0gUm9sZS5vd25lcikgcmV0dXJuIHRydWU7XG4gIGlmIChyb2xlID09PSBSb2xlLmFkbWluICYmIGNvbXBhcmVfcm9sZSAhPT0gUm9sZS5vd25lciAmJiBjb21wYXJlX3JvbGUgIT09IFJvbGUuc3VwZXJfYWRtaW4pXG4gICAgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLElBQUFBLEtBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLE1BQUEsR0FBQUQsT0FBQTtBQUVPLElBQU1FLE9BQU8sR0FBRyxTQUFWQSxPQUFPQSxDQUFJQyxHQUFZLEVBQUs7RUFDdkMsSUFBTUMsSUFBSSxHQUFHQyxPQUFPLENBQUNGLEdBQUcsQ0FBQztFQUV6QixPQUFPQyxJQUFJLEtBQUtFLFVBQUksQ0FBQ0MsS0FBSztBQUM1QixDQUFDO0FBQUNDLE9BQUEsQ0FBQU4sT0FBQSxHQUFBQSxPQUFBO0FBRUssSUFBTU8sT0FBTyxHQUFHLFNBQVZBLE9BQU9BLENBQUlOLEdBQVksRUFBSztFQUN2QyxJQUFNQyxJQUFJLEdBQUdDLE9BQU8sQ0FBQ0YsR0FBRyxDQUFDO0VBRXpCLE9BQU9DLElBQUksS0FBS0UsVUFBSSxDQUFDSSxLQUFLO0FBQzVCLENBQUM7QUFBQ0YsT0FBQSxDQUFBQyxPQUFBLEdBQUFBLE9BQUE7QUFFSyxJQUFNRSxZQUFZLEdBQUcsU0FBZkEsWUFBWUEsQ0FBSVIsR0FBWSxFQUFLO0VBQzVDLElBQU1DLElBQUksR0FBR0MsT0FBTyxDQUFDRixHQUFHLENBQUM7RUFFekIsT0FBT0MsSUFBSSxLQUFLRSxVQUFJLENBQUNNLFdBQVc7QUFDbEMsQ0FBQztBQUFDSixPQUFBLENBQUFHLFlBQUEsR0FBQUEsWUFBQTtBQUVLLElBQU1FLFNBQVMsR0FBRyxTQUFaQSxTQUFTQSxDQUFJVixHQUFZLEVBQUs7RUFDekMsSUFBTUMsSUFBSSxHQUFHQyxPQUFPLENBQUNGLEdBQUcsQ0FBQztFQUV6QixPQUFPQyxJQUFJLEtBQUtFLFVBQUksQ0FBQ1EsT0FBTztBQUM5QixDQUFDO0FBQUNOLE9BQUEsQ0FBQUssU0FBQSxHQUFBQSxTQUFBO0FBRUssSUFBTVIsT0FBTyxHQUFHLFNBQVZBLE9BQU9BLENBQUlGLEdBQVksRUFBSztFQUFBLElBQUFZLFdBQUE7RUFDdkMsSUFBTUMsS0FBSyxJQUFBRCxXQUFBLEdBQUdaLEdBQUcsQ0FBQ2MsTUFBTSxDQUFDLGVBQWUsQ0FBQyxjQUFBRixXQUFBLHVCQUEzQkEsV0FBQSxDQUE2QkcsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUNuRCxJQUFBQyxTQUFBLEdBQWlCLElBQUFDLGVBQVEsRUFBQ0osS0FBSyxhQUFMQSxLQUFLLGNBQUxBLEtBQUssR0FBSSxFQUFFLENBQUM7SUFBOUJaLElBQUksR0FBQWUsU0FBQSxDQUFKZixJQUFJO0VBRVosT0FBT0EsSUFBSTtBQUNiLENBQUM7QUFBQ0ksT0FBQSxDQUFBSCxPQUFBLEdBQUFBLE9BQUE7QUFFSyxJQUFNZ0IsZUFBZSxHQUFHLFNBQWxCQSxlQUFlQSxDQUFJakIsSUFBVSxFQUFFa0IsWUFBa0IsRUFBSztFQUNqRSxJQUFJbEIsSUFBSSxLQUFLRSxVQUFJLENBQUNRLE9BQU8sSUFBSVYsSUFBSSxLQUFLRSxVQUFJLENBQUNpQixJQUFJLEVBQUUsT0FBTyxLQUFLO0VBQzdELElBQUluQixJQUFJLEtBQUtrQixZQUFZLEVBQUUsT0FBTyxJQUFJO0VBQ3RDLElBQUlsQixJQUFJLEtBQUtFLFVBQUksQ0FBQ0MsS0FBSyxFQUFFLE9BQU8sSUFBSTtFQUNwQyxJQUFJSCxJQUFJLEtBQUtFLFVBQUksQ0FBQ00sV0FBVyxJQUFJVSxZQUFZLEtBQUtoQixVQUFJLENBQUNDLEtBQUssRUFBRSxPQUFPLElBQUk7RUFDekUsSUFBSUgsSUFBSSxLQUFLRSxVQUFJLENBQUNJLEtBQUssSUFBSVksWUFBWSxLQUFLaEIsVUFBSSxDQUFDQyxLQUFLLElBQUllLFlBQVksS0FBS2hCLFVBQUksQ0FBQ00sV0FBVyxFQUN6RixPQUFPLElBQUk7RUFDYixPQUFPLEtBQUs7QUFDZCxDQUFDO0FBQUNKLE9BQUEsQ0FBQWEsZUFBQSxHQUFBQSxlQUFBIn0=