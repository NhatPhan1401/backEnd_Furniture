"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.langCodeReg = exports["default"] = exports.Language = exports.Content = exports.Banner = void 0;
var _mongoose = require("mongoose");
var langCodeReg = /^([a-z]{2})$/;

/*********************TYPE & INTERFACE*****************************/
exports.langCodeReg = langCodeReg;
var Language = /*#__PURE__*/function (Language) {
  Language["vietnam"] = "vi";
  Language["english"] = "en";
  return Language;
}({});
exports.Language = Language;
/*******************************SCHEMA*****************************/

var Content = {
  lang: {
    type: String,
    "enum": ['en', 'vi'],
    "default": 'en',
    validate: {
      validator: function validator(v) {
        return langCodeReg.test(v);
      },
      message: function (props) {
        return "".concat(props.value, " is not a valid language code!");
      }
    }
  },
  content: {
    type: String,
    required: true
  }
};
exports.Content = Content;
var Banner = {
  image: {
    type: String,
    required: true
  },
  title: {
    type: [Content],
    required: true
  },
  description: {
    type: [Content],
    required: true
  }
};
exports.Banner = Banner;
var templateSchema = new _mongoose.Schema({
  banners: {
    type: [Banner],
    "default": []
  },
  about: {
    type: Banner,
    required: true
  },
  home_footer: {
    type: [Content],
    "default": []
  },
  contact: {
    type: [Content],
    "default": []
  },
  terms_and_conditions: {
    type: [Content],
    "default": []
  },
  privacy_policy: {
    type: [Content],
    "default": []
  },
  active: {
    type: Boolean,
    "default": false
  },
  title: {
    type: String,
    required: true
  }
}, {
  timestamps: true
});
var _default = (0, _mongoose.model)('Template', templateSchema);
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbW9uZ29vc2UiLCJyZXF1aXJlIiwibGFuZ0NvZGVSZWciLCJleHBvcnRzIiwiTGFuZ3VhZ2UiLCJDb250ZW50IiwibGFuZyIsInR5cGUiLCJTdHJpbmciLCJ2YWxpZGF0ZSIsInZhbGlkYXRvciIsInYiLCJ0ZXN0IiwibWVzc2FnZSIsInByb3BzIiwiY29uY2F0IiwidmFsdWUiLCJjb250ZW50IiwicmVxdWlyZWQiLCJCYW5uZXIiLCJpbWFnZSIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJ0ZW1wbGF0ZVNjaGVtYSIsIlNjaGVtYSIsImJhbm5lcnMiLCJhYm91dCIsImhvbWVfZm9vdGVyIiwiY29udGFjdCIsInRlcm1zX2FuZF9jb25kaXRpb25zIiwicHJpdmFjeV9wb2xpY3kiLCJhY3RpdmUiLCJCb29sZWFuIiwidGltZXN0YW1wcyIsIl9kZWZhdWx0IiwibW9kZWwiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kZWxzL3RlbXBsYXRlL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNjaGVtYSwgbW9kZWwsIERvY3VtZW50LCBWYWxpZGF0b3JNZXNzYWdlRm4gfSBmcm9tICdtb25nb29zZSc7XG5cbmV4cG9ydCBjb25zdCBsYW5nQ29kZVJlZyA9IC9eKFthLXpdezJ9KSQvO1xuXG4vKioqKioqKioqKioqKioqKioqKioqVFlQRSAmIElOVEVSRkFDRSoqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5leHBvcnQgdHlwZSBUZW1wbGF0ZVR5cGUgPSB7XG4gIGJhbm5lcnM6IEJhbm5lclR5cGVbXTtcbiAgYWJvdXQ6IEJhbm5lclR5cGU7XG4gIGhvbWVfZm9vdGVyOiBDb250ZW50VHlwZVtdO1xuICBjb250YWN0OiBDb250ZW50VHlwZVtdO1xuICB0ZXJtc19hbmRfY29uZGl0aW9uczogQ29udGVudFR5cGVbXTtcbiAgcHJpdmFjeV9wb2xpY3k6IENvbnRlbnRUeXBlW107XG4gIGFjdGl2ZTogYm9vbGVhbjtcbiAgdGl0bGU6IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIEJhbm5lclR5cGUgPSB7XG4gIF9pZDogc3RyaW5nO1xuICBpbWFnZTogc3RyaW5nO1xuICB0aXRsZTogQ29udGVudFR5cGVbXTtcbiAgZGVzY3JpcHRpb246IENvbnRlbnRUeXBlW107XG59O1xuXG5leHBvcnQgdHlwZSBDb250ZW50VHlwZSA9IHtcbiAgX2lkOiBzdHJpbmc7XG4gIGxhbmc6IExhbmd1YWdlO1xuICBjb250ZW50OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgZW51bSBMYW5ndWFnZSB7XG4gIHZpZXRuYW0gPSAndmknLFxuICBlbmdsaXNoID0gJ2VuJ1xufVxuXG5leHBvcnQgdHlwZSBUZW1wbGF0ZVJlc3BvbnNlID0gVGVtcGxhdGVUeXBlICYge1xuICBfaWQ6IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIFRlbXBsYXRlTW9kZWwgPSBUZW1wbGF0ZVR5cGUgJiBEb2N1bWVudDtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipTQ0hFTUEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuZXhwb3J0IGNvbnN0IENvbnRlbnQgPSB7XG4gIGxhbmc6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZW51bTogWydlbicsICd2aSddLFxuICAgIGRlZmF1bHQ6ICdlbicsXG4gICAgdmFsaWRhdGU6IHtcbiAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gKHY6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gbGFuZ0NvZGVSZWcudGVzdCh2KTtcbiAgICAgIH0sXG4gICAgICBtZXNzYWdlOiAoKHByb3BzKSA9PiBgJHtwcm9wcy52YWx1ZX0gaXMgbm90IGEgdmFsaWQgbGFuZ3VhZ2UgY29kZSFgKSBhcyBWYWxpZGF0b3JNZXNzYWdlRm5cbiAgICB9XG4gIH0sXG4gIGNvbnRlbnQ6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSB9XG59O1xuXG5leHBvcnQgY29uc3QgQmFubmVyID0ge1xuICBpbWFnZTogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXG4gIHRpdGxlOiB7IHR5cGU6IFtDb250ZW50XSwgcmVxdWlyZWQ6IHRydWUgfSxcbiAgZGVzY3JpcHRpb246IHsgdHlwZTogW0NvbnRlbnRdLCByZXF1aXJlZDogdHJ1ZSB9XG59O1xuXG5jb25zdCB0ZW1wbGF0ZVNjaGVtYSA9IG5ldyBTY2hlbWEoXG4gIHtcbiAgICBiYW5uZXJzOiB7IHR5cGU6IFtCYW5uZXJdLCBkZWZhdWx0OiBbXSB9LFxuICAgIGFib3V0OiB7IHR5cGU6IEJhbm5lciwgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICBob21lX2Zvb3RlcjogeyB0eXBlOiBbQ29udGVudF0sIGRlZmF1bHQ6IFtdIH0sXG4gICAgY29udGFjdDogeyB0eXBlOiBbQ29udGVudF0sIGRlZmF1bHQ6IFtdIH0sXG4gICAgdGVybXNfYW5kX2NvbmRpdGlvbnM6IHsgdHlwZTogW0NvbnRlbnRdLCBkZWZhdWx0OiBbXSB9LFxuICAgIHByaXZhY3lfcG9saWN5OiB7IHR5cGU6IFtDb250ZW50XSwgZGVmYXVsdDogW10gfSxcbiAgICBhY3RpdmU6IHsgdHlwZTogQm9vbGVhbiwgZGVmYXVsdDogZmFsc2UgfSxcbiAgICB0aXRsZTogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH1cbiAgfSxcbiAgeyB0aW1lc3RhbXBzOiB0cnVlIH1cbik7XG5cbmV4cG9ydCBkZWZhdWx0IG1vZGVsPFRlbXBsYXRlTW9kZWw+KCdUZW1wbGF0ZScsIHRlbXBsYXRlU2NoZW1hKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsU0FBQSxHQUFBQyxPQUFBO0FBRU8sSUFBTUMsV0FBVyxHQUFHLGNBQWM7O0FBRXpDO0FBQUFDLE9BQUEsQ0FBQUQsV0FBQSxHQUFBQSxXQUFBO0FBQUEsSUEwQllFLFFBQVEsMEJBQVJBLFFBQVE7RUFBUkEsUUFBUTtFQUFSQSxRQUFRO0VBQUEsT0FBUkEsUUFBUTtBQUFBO0FBQUFELE9BQUEsQ0FBQUMsUUFBQSxHQUFBQSxRQUFBO0FBV3BCOztBQUVPLElBQU1DLE9BQU8sR0FBRztFQUNyQkMsSUFBSSxFQUFFO0lBQ0pDLElBQUksRUFBRUMsTUFBTTtJQUNaLFFBQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0lBQ2xCLFdBQVMsSUFBSTtJQUNiQyxRQUFRLEVBQUU7TUFDUkMsU0FBUyxFQUFFLFNBQUFBLFVBQVVDLENBQVMsRUFBRTtRQUM5QixPQUFPVCxXQUFXLENBQUNVLElBQUksQ0FBQ0QsQ0FBQyxDQUFDO01BQzVCLENBQUM7TUFDREUsT0FBTyxFQUFHLFNBQUFBLENBQUNDLEtBQUs7UUFBQSxVQUFBQyxNQUFBLENBQVFELEtBQUssQ0FBQ0UsS0FBSztNQUFBO0lBQ3JDO0VBQ0YsQ0FBQztFQUNEQyxPQUFPLEVBQUU7SUFBRVYsSUFBSSxFQUFFQyxNQUFNO0lBQUVVLFFBQVEsRUFBRTtFQUFLO0FBQzFDLENBQUM7QUFBQ2YsT0FBQSxDQUFBRSxPQUFBLEdBQUFBLE9BQUE7QUFFSyxJQUFNYyxNQUFNLEdBQUc7RUFDcEJDLEtBQUssRUFBRTtJQUFFYixJQUFJLEVBQUVDLE1BQU07SUFBRVUsUUFBUSxFQUFFO0VBQUssQ0FBQztFQUN2Q0csS0FBSyxFQUFFO0lBQUVkLElBQUksRUFBRSxDQUFDRixPQUFPLENBQUM7SUFBRWEsUUFBUSxFQUFFO0VBQUssQ0FBQztFQUMxQ0ksV0FBVyxFQUFFO0lBQUVmLElBQUksRUFBRSxDQUFDRixPQUFPLENBQUM7SUFBRWEsUUFBUSxFQUFFO0VBQUs7QUFDakQsQ0FBQztBQUFDZixPQUFBLENBQUFnQixNQUFBLEdBQUFBLE1BQUE7QUFFRixJQUFNSSxjQUFjLEdBQUcsSUFBSUMsZ0JBQU0sQ0FDL0I7RUFDRUMsT0FBTyxFQUFFO0lBQUVsQixJQUFJLEVBQUUsQ0FBQ1ksTUFBTSxDQUFDO0lBQUUsV0FBUztFQUFHLENBQUM7RUFDeENPLEtBQUssRUFBRTtJQUFFbkIsSUFBSSxFQUFFWSxNQUFNO0lBQUVELFFBQVEsRUFBRTtFQUFLLENBQUM7RUFDdkNTLFdBQVcsRUFBRTtJQUFFcEIsSUFBSSxFQUFFLENBQUNGLE9BQU8sQ0FBQztJQUFFLFdBQVM7RUFBRyxDQUFDO0VBQzdDdUIsT0FBTyxFQUFFO0lBQUVyQixJQUFJLEVBQUUsQ0FBQ0YsT0FBTyxDQUFDO0lBQUUsV0FBUztFQUFHLENBQUM7RUFDekN3QixvQkFBb0IsRUFBRTtJQUFFdEIsSUFBSSxFQUFFLENBQUNGLE9BQU8sQ0FBQztJQUFFLFdBQVM7RUFBRyxDQUFDO0VBQ3REeUIsY0FBYyxFQUFFO0lBQUV2QixJQUFJLEVBQUUsQ0FBQ0YsT0FBTyxDQUFDO0lBQUUsV0FBUztFQUFHLENBQUM7RUFDaEQwQixNQUFNLEVBQUU7SUFBRXhCLElBQUksRUFBRXlCLE9BQU87SUFBRSxXQUFTO0VBQU0sQ0FBQztFQUN6Q1gsS0FBSyxFQUFFO0lBQUVkLElBQUksRUFBRUMsTUFBTTtJQUFFVSxRQUFRLEVBQUU7RUFBSztBQUN4QyxDQUFDLEVBQ0Q7RUFBRWUsVUFBVSxFQUFFO0FBQUssQ0FDckIsQ0FBQztBQUFDLElBQUFDLFFBQUEsR0FFYSxJQUFBQyxlQUFLLEVBQWdCLFVBQVUsRUFBRVosY0FBYyxDQUFDO0FBQUFwQixPQUFBLGNBQUErQixRQUFBIn0=