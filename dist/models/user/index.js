"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.UserInfo = exports.Role = exports.Gender = exports.Address = void 0;
var _mongoose = require("mongoose");
var _cart = require("../cart");
/*********************TYPE & INTERFACE*****************************/
var Gender = /*#__PURE__*/function (Gender) {
  Gender["Male"] = "MALE";
  Gender["Female"] = "FEMALE";
  Gender["other"] = "OTHER";
  return Gender;
}({});
exports.Gender = Gender;
var Role = /*#__PURE__*/function (Role) {
  Role["user"] = "USER";
  Role["admin"] = "ADMIN";
  Role["owner"] = "OWNER";
  Role["shipper"] = "SHIPPER";
  Role["super_admin"] = "SUPER_ADMIN";
  return Role;
}({});
exports.Role = Role;
/*******************************SCHEMA*****************************/

var Address = {
  country: String,
  city: String,
  state: String,
  line1: String,
  line2: String
};
exports.Address = Address;
var UserInfo = {
  first_name: String,
  last_name: String,
  phone: String,
  sex: {
    type: String,
    "enum": ['MALE', 'FEMALE', 'OTHER']
  },
  avatar: String,
  address: Address
};
exports.UserInfo = UserInfo;
var userSchema = new _mongoose.Schema({
  displayName: String,
  email: {
    type: String,
    required: true
  },
  username: {
    type: String,
    required: true
  },
  password: {
    type: String,
    required: true
  },
  role: {
    type: String,
    "enum": ['USER', 'ADMIN', 'OWNER', 'SHIPPER', 'SUPER_ADMIN'],
    "default": 'USER'
  },
  birthday: {
    type: String,
    required: true
  },
  info: UserInfo,
  cart_total: {
    type: Number,
    "default": 0
  },
  cart: [_cart.ProductCart]
}, {
  timestamps: true
});
var _default = (0, _mongoose.model)('User', userSchema);
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbW9uZ29vc2UiLCJyZXF1aXJlIiwiX2NhcnQiLCJHZW5kZXIiLCJleHBvcnRzIiwiUm9sZSIsIkFkZHJlc3MiLCJjb3VudHJ5IiwiU3RyaW5nIiwiY2l0eSIsInN0YXRlIiwibGluZTEiLCJsaW5lMiIsIlVzZXJJbmZvIiwiZmlyc3RfbmFtZSIsImxhc3RfbmFtZSIsInBob25lIiwic2V4IiwidHlwZSIsImF2YXRhciIsImFkZHJlc3MiLCJ1c2VyU2NoZW1hIiwiU2NoZW1hIiwiZGlzcGxheU5hbWUiLCJlbWFpbCIsInJlcXVpcmVkIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInJvbGUiLCJiaXJ0aGRheSIsImluZm8iLCJjYXJ0X3RvdGFsIiwiTnVtYmVyIiwiY2FydCIsIlByb2R1Y3RDYXJ0IiwidGltZXN0YW1wcyIsIl9kZWZhdWx0IiwibW9kZWwiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kZWxzL3VzZXIvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2NoZW1hLCBtb2RlbCwgRG9jdW1lbnQgfSBmcm9tICdtb25nb29zZSc7XG5pbXBvcnQgeyBQcm9kdWN0Q2FydCwgUHJvZHVjdENhcnRUeXBlIH0gZnJvbSAnc3JjL21vZGVscy9jYXJ0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKlRZUEUgJiBJTlRFUkZBQ0UqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuZXhwb3J0IGVudW0gR2VuZGVyIHtcbiAgTWFsZSA9ICdNQUxFJyxcbiAgRmVtYWxlID0gJ0ZFTUFMRScsXG4gIG90aGVyID0gJ09USEVSJ1xufVxuXG5leHBvcnQgdHlwZSBVc2VySW5mb1R5cGUgPSB7XG4gIGZpcnN0X25hbWU/OiBzdHJpbmc7XG4gIGxhc3RfbmFtZT86IHN0cmluZztcbiAgcGhvbmU/OiBzdHJpbmc7XG4gIHNleD86IEdlbmRlcjtcbiAgYXZhdGFyPzogc3RyaW5nO1xuICBhZGRyZXNzPzogQWRkcmVzc1R5cGU7XG59O1xuXG5leHBvcnQgdHlwZSBBZGRyZXNzVHlwZSA9IHtcbiAgY291bnRyeTogc3RyaW5nO1xuICBjaXR5OiBzdHJpbmc7XG4gIHN0YXRlOiBzdHJpbmc7XG4gIGxpbmUxOiBzdHJpbmc7XG4gIGxpbmUyPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgVXNlclR5cGUgPSB7XG4gIGRpc3BsYXlOYW1lPzogc3RyaW5nO1xuICBlbWFpbDogc3RyaW5nO1xuICB1c2VybmFtZTogc3RyaW5nO1xuICBwYXNzd29yZDogc3RyaW5nO1xuICByb2xlOiBSb2xlO1xuICBiaXJ0aGRheTogc3RyaW5nO1xuICBpbmZvOiBVc2VySW5mb1R5cGU7XG4gIGNhcnRfdG90YWw6IG51bWJlcjtcbiAgY2FydDogUHJvZHVjdENhcnRUeXBlW107XG59O1xuXG5leHBvcnQgZW51bSBSb2xlIHtcbiAgdXNlciA9ICdVU0VSJyxcbiAgYWRtaW4gPSAnQURNSU4nLFxuICBvd25lciA9ICdPV05FUicsXG4gIHNoaXBwZXIgPSAnU0hJUFBFUicsXG4gIHN1cGVyX2FkbWluID0gJ1NVUEVSX0FETUlOJ1xufVxuXG5leHBvcnQgdHlwZSBVc2VyUmVzcG9uc2UgPSBPbWl0PFVzZXJUeXBlLCAncGFzc3dvcmQnPiAmIHtcbiAgX2lkOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBVc2VyVHlwZU1vZGVsID0gVXNlclR5cGUgJiBEb2N1bWVudDtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipTQ0hFTUEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuZXhwb3J0IGNvbnN0IEFkZHJlc3MgPSB7XG4gIGNvdW50cnk6IFN0cmluZyxcbiAgY2l0eTogU3RyaW5nLFxuICBzdGF0ZTogU3RyaW5nLFxuICBsaW5lMTogU3RyaW5nLFxuICBsaW5lMjogU3RyaW5nXG59O1xuXG5leHBvcnQgY29uc3QgVXNlckluZm8gPSB7XG4gIGZpcnN0X25hbWU6IFN0cmluZyxcbiAgbGFzdF9uYW1lOiBTdHJpbmcsXG4gIHBob25lOiBTdHJpbmcsXG4gIHNleDogeyB0eXBlOiBTdHJpbmcsIGVudW06IFsnTUFMRScsICdGRU1BTEUnLCAnT1RIRVInXSB9LFxuICBhdmF0YXI6IFN0cmluZyxcbiAgYWRkcmVzczogQWRkcmVzc1xufTtcblxuY29uc3QgdXNlclNjaGVtYSA9IG5ldyBTY2hlbWEoXG4gIHtcbiAgICBkaXNwbGF5TmFtZTogU3RyaW5nLFxuICAgIGVtYWlsOiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICB1c2VybmFtZTogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgcGFzc3dvcmQ6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSB9LFxuICAgIHJvbGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGVudW06IFsnVVNFUicsICdBRE1JTicsICdPV05FUicsICdTSElQUEVSJywgJ1NVUEVSX0FETUlOJ10sXG4gICAgICBkZWZhdWx0OiAnVVNFUidcbiAgICB9LFxuICAgIGJpcnRoZGF5OiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICBpbmZvOiBVc2VySW5mbyxcbiAgICBjYXJ0X3RvdGFsOiB7IHR5cGU6IE51bWJlciwgZGVmYXVsdDogMCB9LFxuICAgIGNhcnQ6IFtQcm9kdWN0Q2FydF1cbiAgfSxcbiAgeyB0aW1lc3RhbXBzOiB0cnVlIH1cbik7XG5cbmV4cG9ydCBkZWZhdWx0IG1vZGVsPFVzZXJUeXBlTW9kZWw+KCdVc2VyJywgdXNlclNjaGVtYSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLFNBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUQsT0FBQTtBQUVBO0FBQUEsSUFFWUUsTUFBTSwwQkFBTkEsTUFBTTtFQUFOQSxNQUFNO0VBQU5BLE1BQU07RUFBTkEsTUFBTTtFQUFBLE9BQU5BLE1BQU07QUFBQTtBQUFBQyxPQUFBLENBQUFELE1BQUEsR0FBQUEsTUFBQTtBQUFBLElBbUNORSxJQUFJLDBCQUFKQSxJQUFJO0VBQUpBLElBQUk7RUFBSkEsSUFBSTtFQUFKQSxJQUFJO0VBQUpBLElBQUk7RUFBSkEsSUFBSTtFQUFBLE9BQUpBLElBQUk7QUFBQTtBQUFBRCxPQUFBLENBQUFDLElBQUEsR0FBQUEsSUFBQTtBQWNoQjs7QUFFTyxJQUFNQyxPQUFPLEdBQUc7RUFDckJDLE9BQU8sRUFBRUMsTUFBTTtFQUNmQyxJQUFJLEVBQUVELE1BQU07RUFDWkUsS0FBSyxFQUFFRixNQUFNO0VBQ2JHLEtBQUssRUFBRUgsTUFBTTtFQUNiSSxLQUFLLEVBQUVKO0FBQ1QsQ0FBQztBQUFDSixPQUFBLENBQUFFLE9BQUEsR0FBQUEsT0FBQTtBQUVLLElBQU1PLFFBQVEsR0FBRztFQUN0QkMsVUFBVSxFQUFFTixNQUFNO0VBQ2xCTyxTQUFTLEVBQUVQLE1BQU07RUFDakJRLEtBQUssRUFBRVIsTUFBTTtFQUNiUyxHQUFHLEVBQUU7SUFBRUMsSUFBSSxFQUFFVixNQUFNO0lBQUUsUUFBTSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTztFQUFFLENBQUM7RUFDeERXLE1BQU0sRUFBRVgsTUFBTTtFQUNkWSxPQUFPLEVBQUVkO0FBQ1gsQ0FBQztBQUFDRixPQUFBLENBQUFTLFFBQUEsR0FBQUEsUUFBQTtBQUVGLElBQU1RLFVBQVUsR0FBRyxJQUFJQyxnQkFBTSxDQUMzQjtFQUNFQyxXQUFXLEVBQUVmLE1BQU07RUFDbkJnQixLQUFLLEVBQUU7SUFBRU4sSUFBSSxFQUFFVixNQUFNO0lBQUVpQixRQUFRLEVBQUU7RUFBSyxDQUFDO0VBQ3ZDQyxRQUFRLEVBQUU7SUFBRVIsSUFBSSxFQUFFVixNQUFNO0lBQUVpQixRQUFRLEVBQUU7RUFBSyxDQUFDO0VBQzFDRSxRQUFRLEVBQUU7SUFBRVQsSUFBSSxFQUFFVixNQUFNO0lBQUVpQixRQUFRLEVBQUU7RUFBSyxDQUFDO0VBQzFDRyxJQUFJLEVBQUU7SUFDSlYsSUFBSSxFQUFFVixNQUFNO0lBQ1osUUFBTSxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxhQUFhLENBQUM7SUFDMUQsV0FBUztFQUNYLENBQUM7RUFDRHFCLFFBQVEsRUFBRTtJQUFFWCxJQUFJLEVBQUVWLE1BQU07SUFBRWlCLFFBQVEsRUFBRTtFQUFLLENBQUM7RUFDMUNLLElBQUksRUFBRWpCLFFBQVE7RUFDZGtCLFVBQVUsRUFBRTtJQUFFYixJQUFJLEVBQUVjLE1BQU07SUFBRSxXQUFTO0VBQUUsQ0FBQztFQUN4Q0MsSUFBSSxFQUFFLENBQUNDLGlCQUFXO0FBQ3BCLENBQUMsRUFDRDtFQUFFQyxVQUFVLEVBQUU7QUFBSyxDQUNyQixDQUFDO0FBQUMsSUFBQUMsUUFBQSxHQUVhLElBQUFDLGVBQUssRUFBZ0IsTUFBTSxFQUFFaEIsVUFBVSxDQUFDO0FBQUFqQixPQUFBLGNBQUFnQyxRQUFBIn0=