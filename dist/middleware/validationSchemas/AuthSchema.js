"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _joi = _interopRequireDefault(require("joi"));
var _Joi = require("../Joi");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var AuthSchema = {
  login: _joi["default"].object({
    username: _joi["default"].string(),
    email: _joi["default"].string().email(),
    password: _joi["default"].string().required()
  }),
  signUp: _joi["default"].object({
    email: _joi["default"].string().email().required(),
    username: _joi["default"].string().min(_Joi.FORM_VALIDATE.username.min).max(_Joi.FORM_VALIDATE.username.max).required(),
    password: _joi["default"].string().min(_Joi.FORM_VALIDATE.password.min).max(_Joi.FORM_VALIDATE.password.max).required(),
    birthday: _joi["default"].string().required(),
    displayName: _joi["default"].string().required()
  }),
  logout: _joi["default"].object({
    refreshToken: _joi["default"].string().required()
  }),
  refreshToken: _joi["default"].object({
    refreshToken: _joi["default"].string().required()
  }),
  changePassword: _joi["default"].object({
    password: _joi["default"].string().required(),
    newPassword: _joi["default"].string().min(_Joi.FORM_VALIDATE.password.min).max(_Joi.FORM_VALIDATE.password.max).required()
  }),
  forgotPassword: _joi["default"].object({
    email: _joi["default"].string().email().required()
  }),
  resetPassword: _joi["default"].object({
    password: _joi["default"].string().min(_Joi.FORM_VALIDATE.password.min).max(_Joi.FORM_VALIDATE.password.max).required(),
    token: _joi["default"].string().required()
  })
};
var _default = AuthSchema;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfam9pIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfSm9pIiwib2JqIiwiX19lc01vZHVsZSIsIkF1dGhTY2hlbWEiLCJsb2dpbiIsIkpvaSIsIm9iamVjdCIsInVzZXJuYW1lIiwic3RyaW5nIiwiZW1haWwiLCJwYXNzd29yZCIsInJlcXVpcmVkIiwic2lnblVwIiwibWluIiwiRk9STV9WQUxJREFURSIsIm1heCIsImJpcnRoZGF5IiwiZGlzcGxheU5hbWUiLCJsb2dvdXQiLCJyZWZyZXNoVG9rZW4iLCJjaGFuZ2VQYXNzd29yZCIsIm5ld1Bhc3N3b3JkIiwiZm9yZ290UGFzc3dvcmQiLCJyZXNldFBhc3N3b3JkIiwidG9rZW4iLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbWlkZGxld2FyZS92YWxpZGF0aW9uU2NoZW1hcy9BdXRoU2NoZW1hLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKb2kgZnJvbSAnam9pJztcbmltcG9ydCB7IEZPUk1fVkFMSURBVEUgfSBmcm9tICdzcmMvbWlkZGxld2FyZS9Kb2knO1xuaW1wb3J0IHtcbiAgRm9yZ290UGFzc3dvcmRSZXF1ZXN0LFxuICBSZXNldFBhc3N3b3JkUmVxdWVzdCxcbiAgQ2hhbmdlUGFzc3dvcmRSZXF1ZXN0LFxuICBMb2dvdXRSZXF1ZXN0LFxuICBSZWZyZXNoVG9rZW5SZXF1ZXN0XG59IGZyb20gJ3NyYy9tb2RlbHMvYXBpL2F1dGgnO1xuXG5pbXBvcnQgeyBVc2VyVHlwZU1vZGVsIH0gZnJvbSAnc3JjL21vZGVscy91c2VyJztcblxuY29uc3QgQXV0aFNjaGVtYSA9IHtcbiAgbG9naW46IEpvaS5vYmplY3Qoe1xuICAgIHVzZXJuYW1lOiBKb2kuc3RyaW5nKCksXG4gICAgZW1haWw6IEpvaS5zdHJpbmcoKS5lbWFpbCgpLFxuICAgIHBhc3N3b3JkOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKVxuICB9KSxcbiAgc2lnblVwOiBKb2kub2JqZWN0PFVzZXJUeXBlTW9kZWw+KHtcbiAgICBlbWFpbDogSm9pLnN0cmluZygpLmVtYWlsKCkucmVxdWlyZWQoKSxcbiAgICB1c2VybmFtZTogSm9pLnN0cmluZygpXG4gICAgICAubWluKEZPUk1fVkFMSURBVEUudXNlcm5hbWUubWluKVxuICAgICAgLm1heChGT1JNX1ZBTElEQVRFLnVzZXJuYW1lLm1heClcbiAgICAgIC5yZXF1aXJlZCgpLFxuICAgIHBhc3N3b3JkOiBKb2kuc3RyaW5nKClcbiAgICAgIC5taW4oRk9STV9WQUxJREFURS5wYXNzd29yZC5taW4pXG4gICAgICAubWF4KEZPUk1fVkFMSURBVEUucGFzc3dvcmQubWF4KVxuICAgICAgLnJlcXVpcmVkKCksXG4gICAgYmlydGhkYXk6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICAgIGRpc3BsYXlOYW1lOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKVxuICB9KSxcbiAgbG9nb3V0OiBKb2kub2JqZWN0PExvZ291dFJlcXVlc3Q+KHtcbiAgICByZWZyZXNoVG9rZW46IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpXG4gIH0pLFxuICByZWZyZXNoVG9rZW46IEpvaS5vYmplY3Q8UmVmcmVzaFRva2VuUmVxdWVzdD4oe1xuICAgIHJlZnJlc2hUb2tlbjogSm9pLnN0cmluZygpLnJlcXVpcmVkKClcbiAgfSksXG4gIGNoYW5nZVBhc3N3b3JkOiBKb2kub2JqZWN0PENoYW5nZVBhc3N3b3JkUmVxdWVzdD4oe1xuICAgIHBhc3N3b3JkOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgICBuZXdQYXNzd29yZDogSm9pLnN0cmluZygpXG4gICAgICAubWluKEZPUk1fVkFMSURBVEUucGFzc3dvcmQubWluKVxuICAgICAgLm1heChGT1JNX1ZBTElEQVRFLnBhc3N3b3JkLm1heClcbiAgICAgIC5yZXF1aXJlZCgpXG4gIH0pLFxuICBmb3Jnb3RQYXNzd29yZDogSm9pLm9iamVjdDxGb3Jnb3RQYXNzd29yZFJlcXVlc3Q+KHtcbiAgICBlbWFpbDogSm9pLnN0cmluZygpLmVtYWlsKCkucmVxdWlyZWQoKVxuICB9KSxcbiAgcmVzZXRQYXNzd29yZDogSm9pLm9iamVjdDxSZXNldFBhc3N3b3JkUmVxdWVzdD4oe1xuICAgIHBhc3N3b3JkOiBKb2kuc3RyaW5nKClcbiAgICAgIC5taW4oRk9STV9WQUxJREFURS5wYXNzd29yZC5taW4pXG4gICAgICAubWF4KEZPUk1fVkFMSURBVEUucGFzc3dvcmQubWF4KVxuICAgICAgLnJlcXVpcmVkKCksXG4gICAgdG9rZW46IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpXG4gIH0pXG59O1xuXG5leHBvcnQgZGVmYXVsdCBBdXRoU2NoZW1hO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxJQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxJQUFBLEdBQUFELE9BQUE7QUFBbUQsU0FBQUQsdUJBQUFHLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxnQkFBQUEsR0FBQTtBQVduRCxJQUFNRSxVQUFVLEdBQUc7RUFDakJDLEtBQUssRUFBRUMsZUFBRyxDQUFDQyxNQUFNLENBQUM7SUFDaEJDLFFBQVEsRUFBRUYsZUFBRyxDQUFDRyxNQUFNLENBQUMsQ0FBQztJQUN0QkMsS0FBSyxFQUFFSixlQUFHLENBQUNHLE1BQU0sQ0FBQyxDQUFDLENBQUNDLEtBQUssQ0FBQyxDQUFDO0lBQzNCQyxRQUFRLEVBQUVMLGVBQUcsQ0FBQ0csTUFBTSxDQUFDLENBQUMsQ0FBQ0csUUFBUSxDQUFDO0VBQ2xDLENBQUMsQ0FBQztFQUNGQyxNQUFNLEVBQUVQLGVBQUcsQ0FBQ0MsTUFBTSxDQUFnQjtJQUNoQ0csS0FBSyxFQUFFSixlQUFHLENBQUNHLE1BQU0sQ0FBQyxDQUFDLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUNFLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDSixRQUFRLEVBQUVGLGVBQUcsQ0FBQ0csTUFBTSxDQUFDLENBQUMsQ0FDbkJLLEdBQUcsQ0FBQ0Msa0JBQWEsQ0FBQ1AsUUFBUSxDQUFDTSxHQUFHLENBQUMsQ0FDL0JFLEdBQUcsQ0FBQ0Qsa0JBQWEsQ0FBQ1AsUUFBUSxDQUFDUSxHQUFHLENBQUMsQ0FDL0JKLFFBQVEsQ0FBQyxDQUFDO0lBQ2JELFFBQVEsRUFBRUwsZUFBRyxDQUFDRyxNQUFNLENBQUMsQ0FBQyxDQUNuQkssR0FBRyxDQUFDQyxrQkFBYSxDQUFDSixRQUFRLENBQUNHLEdBQUcsQ0FBQyxDQUMvQkUsR0FBRyxDQUFDRCxrQkFBYSxDQUFDSixRQUFRLENBQUNLLEdBQUcsQ0FBQyxDQUMvQkosUUFBUSxDQUFDLENBQUM7SUFDYkssUUFBUSxFQUFFWCxlQUFHLENBQUNHLE1BQU0sQ0FBQyxDQUFDLENBQUNHLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDTSxXQUFXLEVBQUVaLGVBQUcsQ0FBQ0csTUFBTSxDQUFDLENBQUMsQ0FBQ0csUUFBUSxDQUFDO0VBQ3JDLENBQUMsQ0FBQztFQUNGTyxNQUFNLEVBQUViLGVBQUcsQ0FBQ0MsTUFBTSxDQUFnQjtJQUNoQ2EsWUFBWSxFQUFFZCxlQUFHLENBQUNHLE1BQU0sQ0FBQyxDQUFDLENBQUNHLFFBQVEsQ0FBQztFQUN0QyxDQUFDLENBQUM7RUFDRlEsWUFBWSxFQUFFZCxlQUFHLENBQUNDLE1BQU0sQ0FBc0I7SUFDNUNhLFlBQVksRUFBRWQsZUFBRyxDQUFDRyxNQUFNLENBQUMsQ0FBQyxDQUFDRyxRQUFRLENBQUM7RUFDdEMsQ0FBQyxDQUFDO0VBQ0ZTLGNBQWMsRUFBRWYsZUFBRyxDQUFDQyxNQUFNLENBQXdCO0lBQ2hESSxRQUFRLEVBQUVMLGVBQUcsQ0FBQ0csTUFBTSxDQUFDLENBQUMsQ0FBQ0csUUFBUSxDQUFDLENBQUM7SUFDakNVLFdBQVcsRUFBRWhCLGVBQUcsQ0FBQ0csTUFBTSxDQUFDLENBQUMsQ0FDdEJLLEdBQUcsQ0FBQ0Msa0JBQWEsQ0FBQ0osUUFBUSxDQUFDRyxHQUFHLENBQUMsQ0FDL0JFLEdBQUcsQ0FBQ0Qsa0JBQWEsQ0FBQ0osUUFBUSxDQUFDSyxHQUFHLENBQUMsQ0FDL0JKLFFBQVEsQ0FBQztFQUNkLENBQUMsQ0FBQztFQUNGVyxjQUFjLEVBQUVqQixlQUFHLENBQUNDLE1BQU0sQ0FBd0I7SUFDaERHLEtBQUssRUFBRUosZUFBRyxDQUFDRyxNQUFNLENBQUMsQ0FBQyxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDRSxRQUFRLENBQUM7RUFDdkMsQ0FBQyxDQUFDO0VBQ0ZZLGFBQWEsRUFBRWxCLGVBQUcsQ0FBQ0MsTUFBTSxDQUF1QjtJQUM5Q0ksUUFBUSxFQUFFTCxlQUFHLENBQUNHLE1BQU0sQ0FBQyxDQUFDLENBQ25CSyxHQUFHLENBQUNDLGtCQUFhLENBQUNKLFFBQVEsQ0FBQ0csR0FBRyxDQUFDLENBQy9CRSxHQUFHLENBQUNELGtCQUFhLENBQUNKLFFBQVEsQ0FBQ0ssR0FBRyxDQUFDLENBQy9CSixRQUFRLENBQUMsQ0FBQztJQUNiYSxLQUFLLEVBQUVuQixlQUFHLENBQUNHLE1BQU0sQ0FBQyxDQUFDLENBQUNHLFFBQVEsQ0FBQztFQUMvQixDQUFDO0FBQ0gsQ0FBQztBQUFDLElBQUFjLFFBQUEsR0FFYXRCLFVBQVU7QUFBQXVCLE9BQUEsY0FBQUQsUUFBQSJ9