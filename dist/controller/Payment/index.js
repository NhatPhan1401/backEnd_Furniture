"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _lodash = require("lodash");
var _moment = _interopRequireDefault(require("moment"));
var _ = require("../..");
var _product = _interopRequireDefault(require("../../models/product"));
var _purchase = _interopRequireDefault(require("../../models/purchase"));
var _user = _interopRequireDefault(require("../../models/user"));
var _serializers = require("../../serializers");
var _token = require("../../utils/token");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var checkout = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var user_id, _req$body, paymentMethodType, currency, user, params, paymentIntent, resData;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          user_id = (0, _token.getIdFromReq)(req);
          _req$body = req.body, paymentMethodType = _req$body.paymentMethodType, currency = _req$body.currency;
          _context.next = 5;
          return _user["default"].findById(user_id);
        case 5:
          user = _context.sent;
          if (user) {
            _context.next = 8;
            break;
          }
          return _context.abrupt("return", res.status(500).json({
            message: 'error.user.not_found'
          }));
        case 8:
          // Create a PaymentIntent with the order amount and currency.
          params = {
            amount: (0, _lodash.round)(user.cart_total * 100),
            //api count by cent (100cent = $1)
            currency: currency !== null && currency !== void 0 ? currency : 'usd',
            description: "name: ".concat(user.username, ", email: ").concat(user.email),
            payment_method_types: [paymentMethodType]
          }; // If this is for an ACSS payment, we add payment_method_options to create
          // the Mandate.
          if (!(paymentMethodType === 'acss_debit')) {
            _context.next = 13;
            break;
          }
          params.payment_method_options = {
            acss_debit: {
              mandate_options: {
                payment_schedule: 'sporadic',
                transaction_type: 'personal'
              }
            }
          };
          _context.next = 22;
          break;
        case 13:
          if (!(paymentMethodType === 'customer_balance')) {
            _context.next = 22;
            break;
          }
          params.payment_method_data = {
            type: 'customer_balance'
          };
          params.confirm = true;
          _context.t0 = user_id;
          if (_context.t0) {
            _context.next = 21;
            break;
          }
          _context.next = 20;
          return _.stripe.customers.create().then(function (data) {
            return data.id;
          });
        case 20:
          _context.t0 = _context.sent;
        case 21:
          params.customer = _context.t0;
        case 22:
          _context.next = 24;
          return _.stripe.paymentIntents.create(params);
        case 24:
          paymentIntent = _context.sent;
          resData = {
            clientSecret: paymentIntent.client_secret,
            nextAction: paymentIntent.next_action
          };
          return _context.abrupt("return", res.status(200).json(resData));
        case 29:
          _context.prev = 29;
          _context.t1 = _context["catch"](0);
          return _context.abrupt("return", res.status(500).json({
            message: _context.t1
          }));
        case 32:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 29]]);
  }));
  return function checkout(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
var confirmPayment = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var user_id, _req$body2, payment_method, billing_details, user, payment, _payment$card, purchase, savedPurchase, userOrdered, updatedProductsReq, formattedOrdered;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          user_id = (0, _token.getIdFromReq)(req);
          _req$body2 = req.body, payment_method = _req$body2.payment_method, billing_details = _req$body2.billing_details;
          _context3.next = 5;
          return _user["default"].findById(user_id);
        case 5:
          user = _context3.sent;
          _context3.next = 8;
          return _.stripe.paymentMethods.retrieve(payment_method);
        case 8:
          payment = _context3.sent;
          if (!user) {
            _context3.next = 28;
            break;
          }
          purchase = new _purchase["default"]({
            user_id: user_id,
            status: 'PACKAGE',
            total_bill: user.cart_total,
            payment_method: ((_payment$card = payment.card) === null || _payment$card === void 0 ? void 0 : _payment$card.brand) || '',
            package_date: (0, _moment["default"])().format(),
            billingDetails: billing_details,
            products: user.cart
          });
          _context3.next = 13;
          return purchase.save();
        case 13:
          savedPurchase = _context3.sent;
          if (!savedPurchase) {
            _context3.next = 25;
            break;
          }
          _context3.next = 17;
          return _purchase["default"].find({
            user_id: user_id
          });
        case 17:
          userOrdered = _context3.sent;
          updatedProductsReq = user.cart.map( /*#__PURE__*/function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(item) {
              var updatedProduct;
              return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                while (1) switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return _product["default"].findOneAndUpdate({
                      _id: item.product_id
                    }, {
                      $inc: {
                        storage_quantity: -item.quantity
                      }
                    }, {
                      "new": true
                    });
                  case 2:
                    updatedProduct = _context2.sent;
                    return _context2.abrupt("return", updatedProduct);
                  case 4:
                  case "end":
                    return _context2.stop();
                }
              }, _callee2);
            }));
            return function (_x5) {
              return _ref3.apply(this, arguments);
            };
          }());
          _context3.next = 21;
          return Promise.all(updatedProductsReq);
        case 21:
          formattedOrdered = userOrdered.map(function (order) {
            return (0, _serializers.orderedSerializer)(order);
          });
          return _context3.abrupt("return", res.status(200).json(formattedOrdered));
        case 25:
          return _context3.abrupt("return", res.status(500).json({
            message: 'error.user.cart.failed_to_checkout'
          }));
        case 26:
          _context3.next = 29;
          break;
        case 28:
          return _context3.abrupt("return", res.status(404).json({
            message: 'error.user.not_found'
          }));
        case 29:
          _context3.next = 34;
          break;
        case 31:
          _context3.prev = 31;
          _context3.t0 = _context3["catch"](0);
          return _context3.abrupt("return", res.status(500).json({
            message: _context3.t0
          }));
        case 34:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[0, 31]]);
  }));
  return function confirmPayment(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
var productCheck = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {
    var id, quantity, product;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          id = req.params.id;
          quantity = req.body.quantity;
          _context4.next = 5;
          return _product["default"].findById(id);
        case 5:
          product = _context4.sent;
          if (product) {
            _context4.next = 8;
            break;
          }
          return _context4.abrupt("return", res.status(404).json({
            message: 'error.product.not_found'
          }));
        case 8:
          if (!(product.storage_quantity < quantity)) {
            _context4.next = 10;
            break;
          }
          return _context4.abrupt("return", res.status(200).json({
            success: false
          }));
        case 10:
          return _context4.abrupt("return", res.status(200).json({
            success: true
          }));
        case 13:
          _context4.prev = 13;
          _context4.t0 = _context4["catch"](0);
          return _context4.abrupt("return", res.status(500).json({
            message: _context4.t0
          }));
        case 16:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[0, 13]]);
  }));
  return function productCheck(_x6, _x7) {
    return _ref4.apply(this, arguments);
  };
}();
var _default = {
  checkout: checkout,
  confirmPayment: confirmPayment,
  productCheck: productCheck
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwicmVxdWlyZSIsIl9tb21lbnQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiXyIsIl9wcm9kdWN0IiwiX3B1cmNoYXNlIiwiX3VzZXIiLCJfc2VyaWFsaXplcnMiLCJfdG9rZW4iLCJvYmoiLCJfX2VzTW9kdWxlIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsImV4cG9ydHMiLCJPcCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093biIsImhhc093blByb3BlcnR5IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJkZXNjIiwidmFsdWUiLCIkU3ltYm9sIiwiU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImVyciIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInNlbGYiLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY3JlYXRlIiwiY29udGV4dCIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJmbiIsImFyZyIsInR5cGUiLCJjYWxsIiwiQ29udGludWVTZW50aW5lbCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsInZhbHVlcyIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIm1ldGhvZCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVjb3JkIiwicmVzdWx0IiwiX3R5cGVvZiIsIl9fYXdhaXQiLCJ0aGVuIiwidW53cmFwcGVkIiwiZXJyb3IiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsInN0YXRlIiwiRXJyb3IiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsImRvbmUiLCJtZXRob2ROYW1lIiwidW5kZWZpbmVkIiwiVHlwZUVycm9yIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInB1c2giLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImlzTmFOIiwibGVuZ3RoIiwiaSIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiUHJvbWlzZSIsIml0ZXIiLCJrZXlzIiwidmFsIiwib2JqZWN0IiwicmV2ZXJzZSIsInBvcCIsInNraXBUZW1wUmVzZXQiLCJwcmV2IiwiY2hhckF0Iiwic2xpY2UiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsIl9jYXRjaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJfbmV4dCIsIl90aHJvdyIsIl9hc3luY1RvR2VuZXJhdG9yIiwiYXJncyIsImFyZ3VtZW50cyIsImFwcGx5IiwiY2hlY2tvdXQiLCJfcmVmIiwiX2NhbGxlZSIsInJlcSIsInJlcyIsInVzZXJfaWQiLCJfcmVxJGJvZHkiLCJwYXltZW50TWV0aG9kVHlwZSIsImN1cnJlbmN5IiwidXNlciIsInBhcmFtcyIsInBheW1lbnRJbnRlbnQiLCJyZXNEYXRhIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsImdldElkRnJvbVJlcSIsImJvZHkiLCJVc2VyIiwiZmluZEJ5SWQiLCJzdGF0dXMiLCJqc29uIiwibWVzc2FnZSIsImFtb3VudCIsInJvdW5kIiwiY2FydF90b3RhbCIsImRlc2NyaXB0aW9uIiwiY29uY2F0IiwidXNlcm5hbWUiLCJlbWFpbCIsInBheW1lbnRfbWV0aG9kX3R5cGVzIiwicGF5bWVudF9tZXRob2Rfb3B0aW9ucyIsImFjc3NfZGViaXQiLCJtYW5kYXRlX29wdGlvbnMiLCJwYXltZW50X3NjaGVkdWxlIiwidHJhbnNhY3Rpb25fdHlwZSIsInBheW1lbnRfbWV0aG9kX2RhdGEiLCJjb25maXJtIiwidDAiLCJzdHJpcGUiLCJjdXN0b21lcnMiLCJkYXRhIiwiaWQiLCJjdXN0b21lciIsInBheW1lbnRJbnRlbnRzIiwiY2xpZW50U2VjcmV0IiwiY2xpZW50X3NlY3JldCIsIm5leHRBY3Rpb24iLCJuZXh0X2FjdGlvbiIsInQxIiwiX3giLCJfeDIiLCJjb25maXJtUGF5bWVudCIsIl9yZWYyIiwiX2NhbGxlZTMiLCJfcmVxJGJvZHkyIiwicGF5bWVudF9tZXRob2QiLCJiaWxsaW5nX2RldGFpbHMiLCJwYXltZW50IiwiX3BheW1lbnQkY2FyZCIsInB1cmNoYXNlIiwic2F2ZWRQdXJjaGFzZSIsInVzZXJPcmRlcmVkIiwidXBkYXRlZFByb2R1Y3RzUmVxIiwiZm9ybWF0dGVkT3JkZXJlZCIsIl9jYWxsZWUzJCIsIl9jb250ZXh0MyIsInBheW1lbnRNZXRob2RzIiwicmV0cmlldmUiLCJQdXJjaGFzZSIsInRvdGFsX2JpbGwiLCJjYXJkIiwiYnJhbmQiLCJwYWNrYWdlX2RhdGUiLCJtb21lbnQiLCJmb3JtYXQiLCJiaWxsaW5nRGV0YWlscyIsInByb2R1Y3RzIiwiY2FydCIsInNhdmUiLCJmaW5kIiwibWFwIiwiX3JlZjMiLCJfY2FsbGVlMiIsIml0ZW0iLCJ1cGRhdGVkUHJvZHVjdCIsIl9jYWxsZWUyJCIsIl9jb250ZXh0MiIsIlByb2R1Y3QiLCJmaW5kT25lQW5kVXBkYXRlIiwiX2lkIiwicHJvZHVjdF9pZCIsIiRpbmMiLCJzdG9yYWdlX3F1YW50aXR5IiwicXVhbnRpdHkiLCJfeDUiLCJhbGwiLCJvcmRlciIsIm9yZGVyZWRTZXJpYWxpemVyIiwiX3gzIiwiX3g0IiwicHJvZHVjdENoZWNrIiwiX3JlZjQiLCJfY2FsbGVlNCIsInByb2R1Y3QiLCJfY2FsbGVlNCQiLCJfY29udGV4dDQiLCJzdWNjZXNzIiwiX3g2IiwiX3g3IiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29udHJvbGxlci9QYXltZW50L2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBzdHJpcGUgfSBmcm9tICdzcmMnO1xuaW1wb3J0IHsgQ2hlY2tvdXRSZXF1ZXN0LCBDaGVja291dFJlc3BvbnNlLCBDb25maXJtUGF5bWVudFJlcXVlc3QgfSBmcm9tICdzcmMvbW9kZWxzL2FwaS9wYXltZW50JztcbmltcG9ydCBQcm9kdWN0IGZyb20gJ3NyYy9tb2RlbHMvcHJvZHVjdCc7XG5pbXBvcnQgUHVyY2hhc2UgZnJvbSAnc3JjL21vZGVscy9wdXJjaGFzZSc7XG5pbXBvcnQgVXNlciBmcm9tICdzcmMvbW9kZWxzL3VzZXInO1xuaW1wb3J0IHsgb3JkZXJlZFNlcmlhbGl6ZXIgfSBmcm9tICdzcmMvc2VyaWFsaXplcnMnO1xuaW1wb3J0IHsgZ2V0SWRGcm9tUmVxIH0gZnJvbSAnc3JjL3V0aWxzL3Rva2VuJztcbmltcG9ydCBTdHJpcGUgZnJvbSAnc3RyaXBlJztcblxuY29uc3QgY2hlY2tvdXQgPSBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXNlcl9pZCA9IGdldElkRnJvbVJlcShyZXEpO1xuICAgIGNvbnN0IHsgcGF5bWVudE1ldGhvZFR5cGUsIGN1cnJlbmN5IH06IENoZWNrb3V0UmVxdWVzdCA9IHJlcS5ib2R5O1xuXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5SWQodXNlcl9pZCk7XG4gICAgaWYgKCF1c2VyKSByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnZXJyb3IudXNlci5ub3RfZm91bmQnIH0pO1xuXG4gICAgLy8gQ3JlYXRlIGEgUGF5bWVudEludGVudCB3aXRoIHRoZSBvcmRlciBhbW91bnQgYW5kIGN1cnJlbmN5LlxuICAgIGNvbnN0IHBhcmFtczogU3RyaXBlLlBheW1lbnRJbnRlbnRDcmVhdGVQYXJhbXMgPSB7XG4gICAgICBhbW91bnQ6IHJvdW5kKHVzZXIuY2FydF90b3RhbCAqIDEwMCksIC8vYXBpIGNvdW50IGJ5IGNlbnQgKDEwMGNlbnQgPSAkMSlcbiAgICAgIGN1cnJlbmN5OiBjdXJyZW5jeSA/PyAndXNkJyxcbiAgICAgIGRlc2NyaXB0aW9uOiBgbmFtZTogJHt1c2VyLnVzZXJuYW1lfSwgZW1haWw6ICR7dXNlci5lbWFpbH1gLFxuICAgICAgcGF5bWVudF9tZXRob2RfdHlwZXM6IFtwYXltZW50TWV0aG9kVHlwZV1cbiAgICB9O1xuICAgIC8vIElmIHRoaXMgaXMgZm9yIGFuIEFDU1MgcGF5bWVudCwgd2UgYWRkIHBheW1lbnRfbWV0aG9kX29wdGlvbnMgdG8gY3JlYXRlXG4gICAgLy8gdGhlIE1hbmRhdGUuXG4gICAgaWYgKHBheW1lbnRNZXRob2RUeXBlID09PSAnYWNzc19kZWJpdCcpIHtcbiAgICAgIHBhcmFtcy5wYXltZW50X21ldGhvZF9vcHRpb25zID0ge1xuICAgICAgICBhY3NzX2RlYml0OiB7XG4gICAgICAgICAgbWFuZGF0ZV9vcHRpb25zOiB7XG4gICAgICAgICAgICBwYXltZW50X3NjaGVkdWxlOiAnc3BvcmFkaWMnLFxuICAgICAgICAgICAgdHJhbnNhY3Rpb25fdHlwZTogJ3BlcnNvbmFsJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHBheW1lbnRNZXRob2RUeXBlID09PSAnY3VzdG9tZXJfYmFsYW5jZScpIHtcbiAgICAgIHBhcmFtcy5wYXltZW50X21ldGhvZF9kYXRhID0ge1xuICAgICAgICB0eXBlOiAnY3VzdG9tZXJfYmFsYW5jZSdcbiAgICAgIH0gYXMgYW55O1xuICAgICAgcGFyYW1zLmNvbmZpcm0gPSB0cnVlO1xuICAgICAgcGFyYW1zLmN1c3RvbWVyID0gdXNlcl9pZCB8fCAoYXdhaXQgc3RyaXBlLmN1c3RvbWVycy5jcmVhdGUoKS50aGVuKChkYXRhKSA9PiBkYXRhLmlkKSk7XG4gICAgfVxuXG4gICAgY29uc3QgcGF5bWVudEludGVudDogU3RyaXBlLlBheW1lbnRJbnRlbnQgPSBhd2FpdCBzdHJpcGUucGF5bWVudEludGVudHMuY3JlYXRlKHBhcmFtcyk7XG4gICAgY29uc3QgcmVzRGF0YTogQ2hlY2tvdXRSZXNwb25zZSA9IHtcbiAgICAgIGNsaWVudFNlY3JldDogcGF5bWVudEludGVudC5jbGllbnRfc2VjcmV0LFxuICAgICAgbmV4dEFjdGlvbjogcGF5bWVudEludGVudC5uZXh0X2FjdGlvblxuICAgIH07XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHJlc0RhdGEpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiBlcnIgfSk7XG4gIH1cbn07XG5cbmNvbnN0IGNvbmZpcm1QYXltZW50ID0gYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHVzZXJfaWQgPSBnZXRJZEZyb21SZXEocmVxKTtcbiAgICBjb25zdCB7IHBheW1lbnRfbWV0aG9kLCBiaWxsaW5nX2RldGFpbHMgfTogQ29uZmlybVBheW1lbnRSZXF1ZXN0ID0gcmVxLmJvZHk7XG4gICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5SWQodXNlcl9pZCk7XG4gICAgY29uc3QgcGF5bWVudCA9IGF3YWl0IHN0cmlwZS5wYXltZW50TWV0aG9kcy5yZXRyaWV2ZShwYXltZW50X21ldGhvZCk7XG4gICAgaWYgKHVzZXIpIHtcbiAgICAgIGNvbnN0IHB1cmNoYXNlID0gbmV3IFB1cmNoYXNlKHtcbiAgICAgICAgdXNlcl9pZCxcbiAgICAgICAgc3RhdHVzOiAnUEFDS0FHRScsXG4gICAgICAgIHRvdGFsX2JpbGw6IHVzZXIuY2FydF90b3RhbCxcbiAgICAgICAgcGF5bWVudF9tZXRob2Q6IHBheW1lbnQuY2FyZD8uYnJhbmQgfHwgJycsXG4gICAgICAgIHBhY2thZ2VfZGF0ZTogbW9tZW50KCkuZm9ybWF0KCksXG4gICAgICAgIGJpbGxpbmdEZXRhaWxzOiBiaWxsaW5nX2RldGFpbHMsXG4gICAgICAgIHByb2R1Y3RzOiB1c2VyLmNhcnRcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBzYXZlZFB1cmNoYXNlID0gYXdhaXQgcHVyY2hhc2Uuc2F2ZSgpO1xuICAgICAgaWYgKHNhdmVkUHVyY2hhc2UpIHtcbiAgICAgICAgY29uc3QgdXNlck9yZGVyZWQgPSBhd2FpdCBQdXJjaGFzZS5maW5kKHsgdXNlcl9pZCB9KTtcbiAgICAgICAgY29uc3QgdXBkYXRlZFByb2R1Y3RzUmVxID0gdXNlci5jYXJ0Lm1hcChhc3luYyAoaXRlbSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHVwZGF0ZWRQcm9kdWN0ID0gYXdhaXQgUHJvZHVjdC5maW5kT25lQW5kVXBkYXRlKFxuICAgICAgICAgICAgeyBfaWQ6IGl0ZW0ucHJvZHVjdF9pZCB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAkaW5jOiB7XG4gICAgICAgICAgICAgICAgc3RvcmFnZV9xdWFudGl0eTogLWl0ZW0ucXVhbnRpdHlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgbmV3OiB0cnVlIH1cbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiB1cGRhdGVkUHJvZHVjdDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwodXBkYXRlZFByb2R1Y3RzUmVxKTtcblxuICAgICAgICBjb25zdCBmb3JtYXR0ZWRPcmRlcmVkID0gdXNlck9yZGVyZWQubWFwKChvcmRlcikgPT4gb3JkZXJlZFNlcmlhbGl6ZXIob3JkZXIpKTtcblxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oZm9ybWF0dGVkT3JkZXJlZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnZXJyb3IudXNlci5jYXJ0LmZhaWxlZF90b19jaGVja291dCcgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6ICdlcnJvci51c2VyLm5vdF9mb3VuZCcgfSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiBlcnIgfSk7XG4gIH1cbn07XG5cbmNvbnN0IHByb2R1Y3RDaGVjayA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xuICAgIGNvbnN0IHF1YW50aXR5OiBudW1iZXIgPSByZXEuYm9keS5xdWFudGl0eTtcbiAgICBjb25zdCBwcm9kdWN0ID0gYXdhaXQgUHJvZHVjdC5maW5kQnlJZChpZCk7XG5cbiAgICBpZiAoIXByb2R1Y3QpIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6ICdlcnJvci5wcm9kdWN0Lm5vdF9mb3VuZCcgfSk7XG5cbiAgICBpZiAocHJvZHVjdC5zdG9yYWdlX3F1YW50aXR5IDwgcXVhbnRpdHkpIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7IHN1Y2Nlc3M6IGZhbHNlIH0pO1xuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7IHN1Y2Nlc3M6IHRydWUgfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6IGVyciB9KTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgeyBjaGVja291dCwgY29uZmlybVBheW1lbnQsIHByb2R1Y3RDaGVjayB9O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0EsSUFBQUEsT0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsQ0FBQSxHQUFBSCxPQUFBO0FBRUEsSUFBQUksUUFBQSxHQUFBRixzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUssU0FBQSxHQUFBSCxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQU0sS0FBQSxHQUFBSixzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQU8sWUFBQSxHQUFBUCxPQUFBO0FBQ0EsSUFBQVEsTUFBQSxHQUFBUixPQUFBO0FBQStDLFNBQUFFLHVCQUFBTyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsZ0JBQUFBLEdBQUE7QUFBQSxTQUFBRSxvQkFBQSxrQkFSL0MscUpBQUFBLG1CQUFBLFlBQUFBLG9CQUFBLFdBQUFDLE9BQUEsU0FBQUEsT0FBQSxPQUFBQyxFQUFBLEdBQUFDLE1BQUEsQ0FBQUMsU0FBQSxFQUFBQyxNQUFBLEdBQUFILEVBQUEsQ0FB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