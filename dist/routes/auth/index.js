"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _express = require("express");
var _controller = require("../../controller");
var _Joi = require("../../middleware/Joi");
var _validate = require("../../middleware/validate");
var _validationSchemas = require("../../middleware/validationSchemas");
var router = (0, _express.Router)();
router.post('/signup', (0, _Joi.ValidateJoi)(_validationSchemas.AuthSchema.signUp), _controller.authController.signup);
router.post('/login', (0, _Joi.ValidateJoi)(_validationSchemas.AuthSchema.login), _controller.authController.login);
router.post('/logout', _validate.validateToken, (0, _Joi.ValidateJoi)(_validationSchemas.AuthSchema.logout), _controller.authController.logout);
router.post('/refresh_token', (0, _Joi.ValidateJoi)(_validationSchemas.AuthSchema.refreshToken), _controller.authController.refreshToken);
router.post('/change_password', _validate.validateToken, (0, _Joi.ValidateJoi)(_validationSchemas.AuthSchema.changePassword), _controller.authController.changePassword);
router.post('/forgot_password', (0, _Joi.ValidateJoi)(_validationSchemas.AuthSchema.forgotPassword), _controller.authController.forgotPassword);
router.post('/reset_password', (0, _Joi.ValidateJoi)(_validationSchemas.AuthSchema.resetPassword), _controller.authController.resetPassword);
var _default = router;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsInJlcXVpcmUiLCJfY29udHJvbGxlciIsIl9Kb2kiLCJfdmFsaWRhdGUiLCJfdmFsaWRhdGlvblNjaGVtYXMiLCJyb3V0ZXIiLCJSb3V0ZXIiLCJwb3N0IiwiVmFsaWRhdGVKb2kiLCJBdXRoU2NoZW1hIiwic2lnblVwIiwiYXV0aENvbnRyb2xsZXIiLCJzaWdudXAiLCJsb2dpbiIsInZhbGlkYXRlVG9rZW4iLCJsb2dvdXQiLCJyZWZyZXNoVG9rZW4iLCJjaGFuZ2VQYXNzd29yZCIsImZvcmdvdFBhc3N3b3JkIiwicmVzZXRQYXNzd29yZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvYXV0aC9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdleHByZXNzJztcblxuaW1wb3J0IHsgYXV0aENvbnRyb2xsZXIgfSBmcm9tICdzcmMvY29udHJvbGxlcic7XG5pbXBvcnQgeyBWYWxpZGF0ZUpvaSB9IGZyb20gJ3NyYy9taWRkbGV3YXJlL0pvaSc7XG5pbXBvcnQgeyB2YWxpZGF0ZVRva2VuIH0gZnJvbSAnc3JjL21pZGRsZXdhcmUvdmFsaWRhdGUnO1xuaW1wb3J0IHsgQXV0aFNjaGVtYSB9IGZyb20gJ3NyYy9taWRkbGV3YXJlL3ZhbGlkYXRpb25TY2hlbWFzJztcblxuY29uc3Qgcm91dGVyID0gUm91dGVyKCk7XG5cbnJvdXRlci5wb3N0KCcvc2lnbnVwJywgVmFsaWRhdGVKb2koQXV0aFNjaGVtYS5zaWduVXApLCBhdXRoQ29udHJvbGxlci5zaWdudXApO1xuXG5yb3V0ZXIucG9zdCgnL2xvZ2luJywgVmFsaWRhdGVKb2koQXV0aFNjaGVtYS5sb2dpbiksIGF1dGhDb250cm9sbGVyLmxvZ2luKTtcblxucm91dGVyLnBvc3QoJy9sb2dvdXQnLCB2YWxpZGF0ZVRva2VuLCBWYWxpZGF0ZUpvaShBdXRoU2NoZW1hLmxvZ291dCksIGF1dGhDb250cm9sbGVyLmxvZ291dCk7XG5cbnJvdXRlci5wb3N0KCcvcmVmcmVzaF90b2tlbicsIFZhbGlkYXRlSm9pKEF1dGhTY2hlbWEucmVmcmVzaFRva2VuKSwgYXV0aENvbnRyb2xsZXIucmVmcmVzaFRva2VuKTtcblxucm91dGVyLnBvc3QoXG4gICcvY2hhbmdlX3Bhc3N3b3JkJyxcbiAgdmFsaWRhdGVUb2tlbixcbiAgVmFsaWRhdGVKb2koQXV0aFNjaGVtYS5jaGFuZ2VQYXNzd29yZCksXG4gIGF1dGhDb250cm9sbGVyLmNoYW5nZVBhc3N3b3JkXG4pO1xuXG5yb3V0ZXIucG9zdChcbiAgJy9mb3Jnb3RfcGFzc3dvcmQnLFxuICBWYWxpZGF0ZUpvaShBdXRoU2NoZW1hLmZvcmdvdFBhc3N3b3JkKSxcbiAgYXV0aENvbnRyb2xsZXIuZm9yZ290UGFzc3dvcmRcbik7XG5cbnJvdXRlci5wb3N0KCcvcmVzZXRfcGFzc3dvcmQnLCBWYWxpZGF0ZUpvaShBdXRoU2NoZW1hLnJlc2V0UGFzc3dvcmQpLCBhdXRoQ29udHJvbGxlci5yZXNldFBhc3N3b3JkKTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxRQUFBLEdBQUFDLE9BQUE7QUFFQSxJQUFBQyxXQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxJQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxTQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxrQkFBQSxHQUFBSixPQUFBO0FBRUEsSUFBTUssTUFBTSxHQUFHLElBQUFDLGVBQU0sRUFBQyxDQUFDO0FBRXZCRCxNQUFNLENBQUNFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBQUMsZ0JBQVcsRUFBQ0MsNkJBQVUsQ0FBQ0MsTUFBTSxDQUFDLEVBQUVDLDBCQUFjLENBQUNDLE1BQU0sQ0FBQztBQUU3RVAsTUFBTSxDQUFDRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUFDLGdCQUFXLEVBQUNDLDZCQUFVLENBQUNJLEtBQUssQ0FBQyxFQUFFRiwwQkFBYyxDQUFDRSxLQUFLLENBQUM7QUFFMUVSLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDLFNBQVMsRUFBRU8sdUJBQWEsRUFBRSxJQUFBTixnQkFBVyxFQUFDQyw2QkFBVSxDQUFDTSxNQUFNLENBQUMsRUFBRUosMEJBQWMsQ0FBQ0ksTUFBTSxDQUFDO0FBRTVGVixNQUFNLENBQUNFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFBQyxnQkFBVyxFQUFDQyw2QkFBVSxDQUFDTyxZQUFZLENBQUMsRUFBRUwsMEJBQWMsQ0FBQ0ssWUFBWSxDQUFDO0FBRWhHWCxNQUFNLENBQUNFLElBQUksQ0FDVCxrQkFBa0IsRUFDbEJPLHVCQUFhLEVBQ2IsSUFBQU4sZ0JBQVcsRUFBQ0MsNkJBQVUsQ0FBQ1EsY0FBYyxDQUFDLEVBQ3RDTiwwQkFBYyxDQUFDTSxjQUNqQixDQUFDO0FBRURaLE1BQU0sQ0FBQ0UsSUFBSSxDQUNULGtCQUFrQixFQUNsQixJQUFBQyxnQkFBVyxFQUFDQyw2QkFBVSxDQUFDUyxjQUFjLENBQUMsRUFDdENQLDBCQUFjLENBQUNPLGNBQ2pCLENBQUM7QUFFRGIsTUFBTSxDQUFDRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsSUFBQUMsZ0JBQVcsRUFBQ0MsNkJBQVUsQ0FBQ1UsYUFBYSxDQUFDLEVBQUVSLDBCQUFjLENBQUNRLGFBQWEsQ0FBQztBQUFDLElBQUFDLFFBQUEsR0FFckZmLE1BQU07QUFBQWdCLE9BQUEsY0FBQUQsUUFBQSJ9